"""
Report Generation and Export Functions for Dataset Comparison
Contains all report generation, export, and documentation functions
"""

import streamlit as st
import pandas as pd
import json
from datetime import datetime
from typing import Dict, List, Any

# Import metadata types
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from src.metadata.metadata_extractor import DatasetMetadata


def generate_metadata_comparison_report(metadata1: DatasetMetadata, metadata2: DatasetMetadata,
                                       comparison_result: Dict[str, Any], name1: str, name2: str):
    """
    Generate a downloadable metadata comparison report
    
    Args:
        metadata1: First dataset metadata
        metadata2: Second dataset metadata
        comparison_result: Results from metadata comparison
        name1: Name of first dataset
        name2: Name of second dataset
    """
    
    report_content = f"""# Metadata Comparison Report

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Executive Summary

**Datasets Compared:**
- **Primary**: {name1} ({metadata1.source_type}, {metadata1.row_count:,} rows Ã— {metadata1.column_count} columns)
- **Comparison**: {name2} ({metadata2.source_type}, {metadata2.row_count:,} rows Ã— {metadata2.column_count} columns)

**Change Analysis:**
- **Overall Change Score**: {comparison_result.get('change_score', 0):.1f}/100
- **Total Changes Detected**: {len(comparison_result.get('changes', []))}
- **Quality Score Change**: {metadata2.data_quality_score - metadata1.data_quality_score:+.1f}%

## Detected Changes

"""

    for i, change in enumerate(comparison_result.get('changes', []), 1):
        report_content += f"""
### {i}. {change['description']}

**Type:** {change['type'].replace('_', ' ').title()}
**Severity:** {change.get('severity', 'unknown').upper()}

**Details:**
{json.dumps(change.get('details', {}), indent=2, default=str)}

---
"""

    report_content += f"""
## Metadata Summary

### {name1} (Primary Dataset)
- **Source Type**: {metadata1.source_type}
- **Dimensions**: {metadata1.row_count:,} rows Ã— {metadata1.column_count} columns
- **Data Quality Score**: {metadata1.data_quality_score:.1f}%
- **Memory Usage**: {metadata1.memory_usage / 1024 / 1024:.1f} MB
- **Total Null Values**: {metadata1.total_null_count:,}
- **Duplicate Rows**: {metadata1.total_duplicate_rows:,}
- **Column Types**: {len(metadata1.numeric_columns)} numeric, {len(metadata1.categorical_columns)} categorical, {len(metadata1.datetime_columns)} datetime

### {name2} (Comparison Dataset)
- **Source Type**: {metadata2.source_type}
- **Dimensions**: {metadata2.row_count:,} rows Ã— {metadata2.column_count} columns
- **Data Quality Score**: {metadata2.data_quality_score:.1f}%
- **Memory Usage**: {metadata2.memory_usage / 1024 / 1024:.1f} MB
- **Total Null Values**: {metadata2.total_null_count:,}
- **Duplicate Rows**: {metadata2.total_duplicate_rows:,}
- **Column Types**: {len(metadata2.numeric_columns)} numeric, {len(metadata2.categorical_columns)} categorical, {len(metadata2.datetime_columns)} datetime

## Recommendations

{chr(10).join(f'{i}. {rec}' for i, rec in enumerate(comparison_result.get('recommendations', []), 1))}

## Hash Fingerprints

### {name1}
- Schema Hash: {metadata1.schema_hash}
- Structure Hash: {metadata1.structure_hash}
- Content Hash: {metadata1.content_hash}
- Stats Hash: {metadata1.stats_hash}

### {name2}
- Schema Hash: {metadata2.schema_hash}
- Structure Hash: {metadata2.structure_hash}
- Content Hash: {metadata2.content_hash}
- Stats Hash: {metadata2.stats_hash}

---
*Report generated by DataMend - Metadata-Based Data Quality Engine*
"""
    
    st.download_button(
        label="ðŸ“„ Download Metadata Report",
        data=report_content,
        file_name=f"metadata_comparison_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
        mime="text/markdown"
    )
    
    st.success("ðŸ“„ Metadata comparison report generated successfully!")


def export_metadata_json(metadata1: DatasetMetadata, metadata2: DatasetMetadata, 
                        comparison_result: Dict[str, Any]):
    """
    Export metadata and comparison results to JSON
    
    Args:
        metadata1: First dataset metadata
        metadata2: Second dataset metadata
        comparison_result: Results from metadata comparison
    """
    
    # Convert dataclasses to dictionaries
    def convert_metadata_to_dict(metadata):
        return {
            'name': metadata.name,
            'source_type': metadata.source_type,
            'row_count': metadata.row_count,
            'column_count': metadata.column_count,
            'memory_usage': metadata.memory_usage,
            'creation_time': metadata.creation_time.isoformat() if isinstance(metadata.creation_time, datetime) else str(metadata.creation_time),
            'column_names': metadata.column_names,
            'column_types': metadata.column_types,
            'schema_hash': metadata.schema_hash,
            'total_null_count': metadata.total_null_count,
            'total_duplicate_rows': metadata.total_duplicate_rows,
            'data_quality_score': metadata.data_quality_score,
            'numeric_columns': metadata.numeric_columns,
            'categorical_columns': metadata.categorical_columns,
            'datetime_columns': metadata.datetime_columns,
            'structure_hash': metadata.structure_hash,
            'content_hash': metadata.content_hash,
            'stats_hash': metadata.stats_hash,
            'source_metadata': metadata.source_metadata
        }
    
    export_data = {
        'export_timestamp': datetime.now().isoformat(),
        'metadata1': convert_metadata_to_dict(metadata1),
        'metadata2': convert_metadata_to_dict(metadata2),
        'comparison_result': comparison_result
    }
    
    json_str = json.dumps(export_data, indent=2, default=str)
    
    st.download_button(
        label="ðŸ’¾ Download Metadata JSON",
        data=json_str,
        file_name=f"metadata_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )
    
    st.success("ðŸ’¾ Metadata exported to JSON successfully!")
